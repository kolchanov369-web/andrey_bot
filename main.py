#!/usr/bin/env python3
# Telegram quest bot "–ê–Ω–¥—Ä–µ–π, —Ç—ã –≤ –∏–≥—Ä–µ!" (—Ä—É—Å—Å–∫–∏–π, —Å —Ñ–æ—Ç–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID", "YOUR_TELEGRAM_ID")  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

# –ó–∞–¥–∞–Ω–∏—è
TASKS = [
    {"text": "–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏, —Å—Ç–æ—è –Ω–∞ –≥–æ–ª–æ–≤–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∂–∞—á–Ω—ã–º –∏ –∏–¥–∏–æ—Ç—Å–∫–∏–º –ª–∏—Ü–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ü§≥ –≠—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —É–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Ç—ãü§£", "button": None},
    {"text": '–ú–æ–ª–æ–¥—Ü–æ–º, —Ç—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–µ—à—å—Å—èüöÄ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—è—Ç–µ—Ä—ã–º —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Å —Ç–µ–∫—Å—Ç–æ–º "–Ø –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ–º—É –æ—Ç–º–µ—á–∞—é —Å–≤–æ–π –î–†! –≠—Ç–æ –≤–∞–º –Ω–µ —Ö–∏—Ö–∞–Ω—å–∫–∏ —Ö–∞—Ö–∞–Ω—å–∫–∏üî•" –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Å–µ–ª—Ñ–∏, –≥–¥–µ —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –≥–æ–ª–æ–≤–µ –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ï–•–ê–õ–ò –î–ê–õ–¨–®–ï¬ªü§™', "button": "–ï–•–ê–õ–ò –î–ê–õ–¨–®–ï"},
    {"text": '–î–∞–ª–µ–µ —Ç–µ–±—è –∂–¥–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫üí∞ –≠—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –¥–≤–æ—Ä–µ –ø–æ–¥ –ª–∞–≤–∫–æ–π. –ù–∞–π–¥–∏ –µ—ëüïµÔ∏è‚Äç‚ôÇÔ∏è –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–π–¥–µ—à—å, –∂–º–∏ –∫–Ω–æ–ø–∫—É "–ù–ê–®–Å–õ"', "button": "–ù–ê–®–Å–õ"},
    {"text": '–≠—Ç–æ –±—ã–ª–∞ —à—É—Ç–∫–∞, –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç ü§£. –ñ–º–∏ "–•–û–ß–£ –ü–û–î–ê–†–û–ö", –µ—Å–ª–∏ –≤—Å—ë –µ—â–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!', "button": "–•–û–ß–£ –ü–û–î–ê–†–û–ö"},
    {"text": '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å—É–ø–µ—Ä –ø—Ä–∏–∑ —Ç–≤–æ–π üéÅ –°–∫–∏–Ω—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã –Ω–∞ –æ–±–æ—Ä–æ—Ç–µ! –®—É—Ç–∫–∞ü§£ –ü–æ–∂–µ–ª–∞–π —Å–µ–±–µ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á–µ–≥–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–æ—Å—Ç–∏—á—å, –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –Ω–∞–±–ª—é–¥–∞–π –∫–∞–∫ –≤—Å—ë —ç—Ç–æ –Ω–∞—á–Ω–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä–µ—Ö –º–µ—Å—è—Ü–µ–≤‚ú® –ò –∂–º–∏ ¬´–Ø –°–ß–ê–°–¢–õ–ò–í–´–ô –ß–ï–õ¬ª.', "button": "–Ø –°–ß–ê–°–¢–õ–ò–í–´–ô –ß–ï–õ"},
]

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SESSIONS = {}  # tg_id: task_index

def get_keyboard(button_text):
    if not button_text:
        return None
    return InlineKeyboardMarkup([[InlineKeyboardButton(button_text, callback_data=button_text)]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    SESSIONS[tg_id] = 0
    keyboard = get_keyboard("–ü–û–ï–•–ê–õ–ò")
    await update.message.reply_text("–ê–Ω–¥—Ä–µ–π, —Ç—ã –≤ –∏–≥—Ä–µüòé –ñ–º–∏ ¬´–ü–û–ï–•–ê–õ–ò¬ª –∏ –ø–æ–µ—Ö–∞–ª–∏üöÄ", reply_markup=keyboard)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tg_id = query.from_user.id
    idx = SESSIONS.get(tg_id, 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–∞–ª–∏
    if idx < len(TASKS):
        expected_button = TASKS[idx]["button"]
        if expected_button is None or query.data == expected_button or query.data == "–ü–û–ï–•–ê–õ–ò":
            idx += 1
            SESSIONS[tg_id] = idx
            if idx < len(TASKS):
                next_task = TASKS[idx]
                await query.message.reply_text(next_task["text"], reply_markup=get_keyboard(next_task["button"]))
            else:
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø—Ä–æ—à–µ–ª –∏–≥—Ä—Éüëç –û–∂–∏–¥–∞–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ")
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                if ADMIN_CHAT_ID:
                    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø—Ä–æ—à–µ–ª –∏–≥—Ä—É!")
        else:
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    else:
        await query.message.reply_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    idx = SESSIONS.get(tg_id, 0)
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É
    if idx == 0:
        SESSIONS[tg_id] = 1
        next_task = TASKS[1]
        await update.message.reply_text(next_task["text"], reply_markup=get_keyboard(next_task["button"]))
    else:
        await update.message.reply_text("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.PHOTO, photo))

    print("Bot is running...")
    app.run_polling()
