import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")  # —Ç–≤–æ–π Telegram ID

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_START = "start"
STATE_PHOTO = "photo"
STATE_DONE = "done"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    keyboard = [[InlineKeyboardButton("–ü–û–ï–•–ê–õ–ò üöÄ", callback_data="go")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ê–Ω–¥—Ä–µ–π, —Ç—ã –≤ –∏–≥—Ä–µüòé –ñ–º–∏ ¬´–ü–û–ï–•–ê–õ–ò¬ª –∏ –ø–æ–µ—Ö–∞–ª–∏üöÄ", reply_markup=reply_markup
    )
    user_states[update.effective_user.id] = STATE_START


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "go":
        user_states[user_id] = STATE_PHOTO
        await query.message.reply_text(
            "–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏, —Å—Ç–æ—è –Ω–∞ –≥–æ–ª–æ–≤–µ, —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∂–∞—á–Ω—ã–º –∏ –∏–¥–∏–æ—Ç—Å–∫–∏–º –ª–∏—Ü–æ–º ü§≥ "
            "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã —É–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Ç—ã ü§£"
        )

    elif query.data == "next":
        await query.message.reply_text(
            "–ú–æ–ª–æ–¥—Ü–æ–º, —Ç—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–µ—à—å—Å—èüöÄ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—è—Ç–µ—Ä—ã–º —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Å —Ç–µ–∫—Å—Ç–æ–º:\n"
            "\"–Ø –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ–º—É –æ—Ç–º–µ—á–∞—é —Å–≤–æ–π –î–†! –≠—Ç–æ –≤–∞–º –Ω–µ —Ö–∏—Ö–∞–Ω—å–∫–∏ —Ö–∞—Ö–∞–Ω—å–∫–∏üî•\"\n\n"
            "–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Å–µ–ª—Ñ–∏, –≥–¥–µ —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –≥–æ–ª–æ–≤–µ. –ü–æ—Ç–æ–º –∂–º–∏ ¬´–ï–•–ê–õ–ò –î–ê–õ–¨–®–ï¬ª ü§™"
        )
        keyboard = [[InlineKeyboardButton("–ï–•–ê–õ–ò –î–ê–õ–¨–®–ï ü§™", callback_data="next2")]]
        await query.message.reply_text(
            "–ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—Éüëá", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "next2":
        await query.message.reply_text(
            "–î–∞–ª–µ–µ —Ç–µ–±—è –∂–¥–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫üí∞\n"
            "–≠—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –¥–≤–æ—Ä–µ –ø–æ–¥ –ª–∞–≤–∫–æ–π. –ù–∞–π–¥–∏ –µ—ëüïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–π–¥–µ—à—å, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ù–ê–®–Å–õ¬ª."
        )
        keyboard = [[InlineKeyboardButton("–ù–ê–®–Å–õ üïµÔ∏è‚Äç‚ôÇÔ∏è", callback_data="found")]]
        await query.message.reply_text(
            "–ö–æ–≥–¥–∞ –Ω–∞–π–¥—ë—à—å ‚Äî –∂–º–∏üëá", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "found":
        keyboard = [[InlineKeyboardButton("–ù–ê–®–Å–õ üïµÔ∏è‚Äç‚ôÇÔ∏è", callback_data="found2")]]
        await query.message.reply_text(
            "–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ¬´–ù–ê–®–Å–õ¬ª, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫, —è —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–πüòé\n"
            "–ò–¥–∏ –∏—â–∏ —Å–Ω–æ–≤–∞! –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–π–¥—ë—à—å, –∂–º–∏ ¬´–ù–ê–®–Å–õ¬ª üëá",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "found2":
        keyboard = [[InlineKeyboardButton("–•–û–ß–£ –ü–û–î–ê–†–û–ö üéÅ", callback_data="gift")]]
        await query.message.reply_text(
            "–≠—Ç–æ –±—ã–ª–∞ —à—É—Ç–∫–∞, –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç ü§£.\n"
            "–ñ–º–∏ ¬´–•–û–ß–£ –ü–û–î–ê–†–û–ö¬ª, –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "gift":
        keyboard = [[InlineKeyboardButton("–Ø –°–ß–ê–°–¢–õ–ò–í–´–ô –ß–ï–õ üòé", callback_data="finish")]]
        await query.message.reply_text(
            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å—É–ø–µ—Ä –ø—Ä–∏–∑ —Ç–≤–æ–π üéÅ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã –Ω–∞ –æ–±–æ—Ä–æ—Ç–µ –∫–∞—Ä—Ç—ã! –®—É—Ç–∫–∞ ü§™ –ü–æ–∂–µ–ª–∞–π —Å–µ–±–µ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á–µ–≥–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–æ—Å—Ç–∏—á—å, "
            "–≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º, –∏ –Ω–∞–±–ª—é–¥–∞–π, "
            "–∫–∞–∫ –≤—Å—ë —ç—Ç–æ –Ω–∞—á–Ω—ë—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä—ë—Ö –º–µ—Å—è—Ü–µ–≤ ‚ú® –ò –∂–º–∏ "–Ø –°–ß–ê–°–¢–õ–ò–í–´–ô –ß–ï–õ"",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "finish":
        await query.message.reply_text(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø—Ä–æ—à—ë–ª –∏–≥—Ä—Éüëç –û–∂–∏–¥–∞–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ"
        )
        if ADMIN_ID:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{query.from_user.first_name} –ø—Ä–æ—à—ë–ª –∏–≥—Ä—É! üéâ"
            )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    if user_states.get(user_id) == STATE_PHOTO:
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! ü§£")
        keyboard = [[InlineKeyboardButton("–ï–•–ê–õ–ò –î–ê–õ–¨–®–ï ü§™", callback_data="next")]]
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –∂–º–∏ –∫–Ω–æ–ø–∫—Éüëá", reply_markup=InlineKeyboardMarkup(keyboard)
        )
        user_states[user_id] = STATE_DONE
    else:
        await update.message.reply_text(
            "–≠—Ç–æ —Ñ–æ—Ç–æ –Ω–µ –∫ –º–µ—Å—Ç—É üòÖ –ñ–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ."
        )


if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("Bot is running via webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        url_path=BOT_TOKEN,
        webhook_url=f"https://andrey-bot.onrender.com/{BOT_TOKEN}"
    )
