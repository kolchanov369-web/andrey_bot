#!/usr/bin/env python3
# Telegram quest bot "–ê–Ω–¥—Ä–µ–π, —Ç—ã –≤ –∏–≥—Ä–µ!" (—Ä—É—Å—Å–∫–∏–π, —Å —Ñ–æ—Ç–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)

import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID", "")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("game.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS sessions (
    tg_id INTEGER PRIMARY KEY,
    payload TEXT,
    state INTEGER,
    photo_received INTEGER DEFAULT 0,
    wish TEXT DEFAULT ''
)""")
conn.commit()

def get_session(tg_id):
    cur.execute("SELECT payload, state, photo_received, wish FROM sessions WHERE tg_id=?", (tg_id,))
    r = cur.fetchone()
    if r:
        return {"payload": r[0], "state": r[1], "photo_received": bool(r[2]), "wish": r[3] or ""}
    return None

def create_session(tg_id, payload):
    cur.execute("INSERT OR REPLACE INTO sessions(tg_id,payload,state,photo_received,wish) VALUES(?,?,?,?,?)",
                (tg_id, payload, 0, 0, ""))
    conn.commit()

def set_state(tg_id, state):
    cur.execute("UPDATE sessions SET state=? WHERE tg_id=?", (state, tg_id))
    conn.commit()

def mark_photo(tg_id):
    cur.execute("UPDATE sessions SET photo_received=1 WHERE tg_id=?", (tg_id,))
    conn.commit()

def save_wish(tg_id, wish):
    cur.execute("UPDATE sessions SET wish=? WHERE tg_id=?", (wish, tg_id))
    conn.commit()

# –ö–Ω–æ–ø–∫–∏
def kb_start():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")]])
def kb_done():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="done")]])
def kb_next(label="–î–∞–ª—å—à–µ"):
    return InlineKeyboardMarkup([[InlineKeyboardButton(label, callback_data="next")]])
def kb_better():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ë–ª–∏–∂–µ", callback_data="closer")]])
def kb_final():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", callback_data="all_done")]])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    payload = args[0] if args else ""
    tg_id = update.effective_user.id
    create_session(tg_id, payload)
    text = "üéÆ *–ê–Ω–¥—Ä–µ–π, —Ç—ã –≤ –∏–≥—Ä–µ!*\n\n–ö–≤–µ—Å—Ç –Ω–∞—á–Ω—ë—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ì–æ—Ç–æ–≤?"
    await update.message.reply_text(text, reply_markup=kb_start(), parse_mode='Markdown')

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tg_id = query.from_user.id
    session = get_session(tg_id)
    if not session:
        create_session(tg_id, "")
        session = get_session(tg_id)
    data = query.data
    if data == "start_game":
        set_state(tg_id, 0)
        await query.message.reply_text("üì∏ *–ó–∞–¥–∞–Ω–∏–µ 1:*\n–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏, —Å—Ç–æ—è –Ω–∞ –≥–æ–ª–æ–≤–µ, —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∂–∞—á–Ω—ã–º –∏–¥–∏–æ—Ç—Å–∫–∏–º –ª–∏—Ü–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞.", parse_mode='Markdown')
    elif data == "done":
        state = session["state"]
        if state == 0:
            if session["photo_received"]:
                set_state(tg_id,1)
                await query.message.reply_text("üëç –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ 1 –ø—Ä–∏–Ω—è—Ç–æ.\n\nüí¨ *–ó–∞–¥–∞–Ω–∏–µ 2:*\n–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—è—Ç–µ—Ä—ã–º –¥—Ä—É–∑—å—è–º —Å —Ç–µ–∫—Å—Ç–æ–º:\n\"–Ø –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ–º—É –æ—Ç–º–µ—á–∞—é —Å–≤–æ–π –î–†. –≠—Ç–æ –≤–∞–º –Ω–µ —Ö–∏—Ö–∞–Ω—å–∫–∏ —Ö–∞—Ö–∞–Ω—å–∫–∏.\"\n–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–µ–ª—Ñ–∏, –≥–¥–µ —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –≥–æ–ª–æ–≤–µ.\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'.", reply_markup=kb_done(), parse_mode='Markdown')
            else:
                await query.message.reply_text("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –º—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ–ª—Ñ–∏. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.")
        elif state == 1:
            set_state(tg_id,2)
            await query.message.reply_text("üìç –î–∞–ª–µ–µ —Ç–µ–±—è –∂–¥–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –¥–≤–æ—Ä–µ –ø–æ–¥ –ª–∞–≤–∫–æ–π.\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'.", reply_markup=kb_done())
        elif state == 2:
            set_state(tg_id,3)
            await query.message.reply_text("ü§£ –•–∞-—Ö–∞, —ç—Ç–æ –±—ã–ª–∞ —à—É—Ç–∫–∞ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–ø–µ—Ä –ø—Ä–∏–∑ ‚Äî –∂–º–∏ '–ë–ª–∏–∂–µ'.", reply_markup=kb_better())
    elif data=="next" or data=="closer":
        set_state(tg_id,4)
        await query.message.reply_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ—á—Ç–∏ –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö!\n\n*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:*\n–ü–æ–∂–µ–ª–∞–π —Å–µ–±–µ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á–µ–≥–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–æ—Å—Ç–∏—á—å, –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –Ω–∞–±–ª—é–¥–∞–π, –∫–∞–∫ –≤—Å—ë —ç—Ç–æ –Ω–∞—á–Ω—ë—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä—ë—Ö –º–µ—Å—è—Ü–µ–≤!\n\n–ò –∂–º–∏ –¥–∞–ª–µ–µ.", reply_markup=kb_final(), parse_mode='Markdown')
    elif data=="all_done":
        set_state(tg_id,99)
        await query.message.reply_text("üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª –∫–≤–µ—Å—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ ‚Äî –æ–∂–∏–¥–∞–π –ø–æ–¥–∞—Ä–æ–∫!")
        if ADMIN_CHAT_ID:
            try:
                await context.bot.send_message(int(ADMIN_CHAT_ID), f"üéâ –ê–Ω–¥—Ä–µ–π –ø—Ä–æ—à—ë–ª –∫–≤–µ—Å—Ç –∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'! (id={tg_id})")
            except: pass

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    session = get_session(tg_id)
    if not session:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return
    photos = update.message.photo
    if photos:
        file = photos[-1].get_file()
        path = f"photos/{tg_id}"
        import os as _os
        _os.makedirs(path, exist_ok=True)
        filename = f"{path}/{file.file_id}.jpg"
        await file.download_to_drive(filename)
        mark_photo(tg_id)
        await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –ù–∞–∂–º–∏ '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'.", reply_markup=kb_done())
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–Ω–µ —Å—Ç–∏–∫–µ—Ä).")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    session = get_session(tg_id)
    if not session:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return
    state = session["state"]
    text = (update.message.text or "").strip()
    if state==4:
        save_wish(tg_id,text)
        await update.message.reply_text("‚úÖ –ü–æ–∂–µ–ª–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ '–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'.", reply_markup=kb_final())
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø—Ä–æ—Å—è—Ç.")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")

def ensure_dirs():
    import os
    os.makedirs("photos", exist_ok=True)

def main():
    ensure_dirs()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_handler))
    app.add_handler(CommandHandler("help", cmd_help))
    print("Bot is running...")
    app.run_polling()

if __name__=="__main__":
    main()
